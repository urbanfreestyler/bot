from bot.util import *
from database.services.patterns import PatternsWork


output_patterns_callback_func = None


def start_create_pattern(chat_id: int, callback):
    global output_patterns_callback_func
    output_patterns_callback_func = callback
    get_russian_pattern_title(chat_id=chat_id)


def get_russian_pattern_title(chat_id: int):
    send_message(chat_id=chat_id,
                 text='üá∑üá∫ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>—à–∞–±–ª–æ–Ω–∞</b> –Ω–∞ –†—É—Å—Å–∫–æ–º',
                 method=set_russian_pattern_title,
                 reply_markup=markups.back(chat_id=chat_id))


def set_russian_pattern_title(message: Message = None):
    chat_id, text, message_id = get_info_from_message(message=message)
    if text != Tx.get(chat_id=chat_id,
                      text_id='Buttons.Direction.BACK'):
        session.set(chat_id=chat_id,
                    key='pattern___rus',
                    value=text)
        get_uzb_pattern_title(chat_id=chat_id)

    else:
        output_patterns_callback_func(chat_id=chat_id)


def get_uzb_pattern_title(chat_id: int):
    send_message(chat_id=chat_id,
                 text="üá∫üáø –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>—à–∞–±–ª–æ–Ω–∞</b> –Ω–∞ –£–∑–±–µ–∫—Å–∫–æ–º",
                 reply_markup=markups.back(chat_id=chat_id),
                 method=set_uzb_pattern_title)


def set_uzb_pattern_title(message: Message):
    chat_id, text, message_id = get_info_from_message(message=message)
    if text != Tx.get(chat_id=chat_id,
                      text_id='Buttons.Direction.BACK'):
        session.set(chat_id=chat_id,
                    key='pattern___uzb',
                    value=text)
        session.set(chat_id=chat_id,
                    key='photo_in_pattern',
                    value=False)
        session.set(chat_id=chat_id,
                    key='questions',
                    value=[])
        get_questions(message=message)

    else:
        get_russian_pattern_title(chat_id=chat_id)


def get_questions(message: Message):
    chat_id, text, message_id = get_info_from_message(message=message)
    session.set(chat_id=chat_id,
                key='question',
                value={})
    get_russian_question(chat_id=chat_id)


def get_russian_question(chat_id: int):
    text = 'üá∑üá∫ –í–≤–µ–¥–∏—Ç–µ {} <b>–≤–æ–ø—Ä–æ—Å</b> –Ω–∞ —Ä—É—Å—Å–∫–æ–º'

    questions = session.get(chat_id=chat_id,
                            key='questions')
    amount_questions = len(questions)
    send_message(chat_id=chat_id,
                 text=text.format(amount_questions + 1),
                 reply_markup=markups.back(chat_id=chat_id) if not amount_questions else None,
                 method=set_russian_question)


def set_russian_question(message: Message):
    chat_id, text, message_id = get_info_from_message(message=message)
    if text != Tx.get(chat_id=chat_id,
                      text_id='Buttons.Direction.BACK'):
        session.set(chat_id=chat_id,
                    key='question___rus',
                    value=text)
        get_uzb_question(chat_id=chat_id)

    else:
        get_uzb_pattern_title(chat_id=chat_id)


def get_uzb_question(chat_id: int):
    send_message(chat_id=chat_id,
                 text="üá∫üáø –í–≤–µ–¥–∏—Ç–µ <b>–≤–æ–ø—Ä–æ—Å</b> –Ω–∞ –£–∑–±–µ–∫—Å–∫–æ–º",
                 reply_markup=markups.back(chat_id=chat_id),
                 method=set_uzb_question)


def set_uzb_question(message: Message):
    chat_id, text, message_id = get_info_from_message(message=message)
    if text != Tx.get(chat_id=chat_id,
                      text_id='Buttons.Direction.BACK'):
        session.set(chat_id=chat_id,
                    key='question___uzb',
                    value=text)
        get_format_question(chat_id=chat_id)

    else:
        get_russian_question(chat_id=chat_id)


def get_format_question(chat_id: int, error: Union[bool, str] = False):
    text = "üß∞ –í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\n" \
           "–ü—Ä–∏–º–µ—Ä:\n" \
           "<code>text_10</code>, –≥–¥–µ:\n" \
                "<code>text</code> - –ª—é–±–æ–π —Ç–µ–∫—Å—Ç,\n" \
                "<code>10</code> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ;\n\n" \
           "<code>int_-1_100</code>, –≥–¥–µ:\n" \
                "<code>int</code> - –ª—é–±–∞—è —Ü–∏—Ñ—Ä–∞,\n" \
                "<code>-1</code> - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Ü–∏—Ñ—Ä—ã,\n" \
                "<code>100</code> - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Ü–∏—Ñ—Ä—ã;\n\n" \
           "<code>photo_5</code>, –≥–¥–µ:\n" \
                "<code>photo</code> - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è,\n" \
                "<code>5</code> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π;\n" \
           "<code>geo</code> - –≤–∑—è—Ç—å –≥–µ–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º;\n" \
           "<code>contact</code> - –≤–∑—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;"

    if error == 'photo':
        text = 'üòñ –§–æ—Ç–æ <u><b>—É–∂–µ</b></u> –¥–æ–±–∞–≤–ª–µ–Ω—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç \n\n' + text

    elif error:
        text = 'üòñ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö\n\n' + text

    send_message(chat_id=chat_id,
                 text=text,
                 reply_markup=markups.back(chat_id=chat_id),
                 method=set_format_question)


def validate_correct_format(text: str) -> bool:
    """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    keywords = text.split('_')
    type_ = keywords[0]

    if type_ not in ('int', 'text', 'photo', 'geo', 'contact'):
        return False

    if type_ in ('geo', 'contact'):
        return True

    if type_ == 'int':
        try:
            if len(keywords[1:]) == 2:
                return bool(int(keywords[1]) and int(keywords[2]))
        except:
            return False

    if type_ in ('photo', 'text'):
        try:
            return 0 < int(keywords[1]) <= (10 if type_ == 'photo' else 1024)
        except:
            return False


def set_format_question(message: Message):
    chat_id, text, message_id = get_info_from_message(message=message)
    if text != Tx.get(chat_id=chat_id,
                      text_id='Buttons.Direction.BACK'):

        photo_exists = session.get(chat_id=chat_id,
                                   key='photo_in_pattern')

        if validate_correct_format(text=text):
            session.set(chat_id=chat_id,
                        key='question___format_',
                        value=text)

            if text.startswith('photo') and photo_exists:
                get_format_question(chat_id=chat_id,
                                    error='photo')
                return

            elif text.startswith('photo'):
                session.set(chat_id=chat_id,
                            key='photo_in_pattern',
                            value=True)

            get_russian_list_title(chat_id=chat_id)

        else:
            get_format_question(chat_id=chat_id,
                                error=True)

    else:
        get_uzb_question(chat_id=chat_id)


def get_russian_list_title(chat_id: int):
    send_message(chat_id=chat_id,
                 text='üá∑üá∫ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–ø–∞—Ä–∞–º–µ—Ç—Ä–∞</b> –Ω–∞ –†—É—Å—Å–∫–æ–º',
                 method=set_russian_list_title,
                 reply_markup=markups.back(chat_id=chat_id))


def set_russian_list_title(message: Message = None):
    chat_id, text, message_id = get_info_from_message(message=message)
    if text != Tx.get(chat_id=chat_id,
                      text_id='Buttons.Direction.BACK'):
        session.set(chat_id=chat_id,
                    key='question___rus_title_in_list',
                    value=text)
        get_uzb_list_title(chat_id=chat_id)

    else:
        get_format_question(chat_id=chat_id)


def get_uzb_list_title(chat_id: int):
    send_message(chat_id=chat_id,
                 text="üá∫üáø –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–ø–∞—Ä–∞–º–µ—Ç—Ä–∞</b> –Ω–∞ –£–∑–±–µ–∫—Å–∫–æ–º",
                 reply_markup=markups.back(chat_id=chat_id),
                 method=set_uzb_list_title)


def set_uzb_list_title(message: Message):
    chat_id, text, message_id = get_info_from_message(message=message)
    if text != Tx.get(chat_id=chat_id,
                      text_id='Buttons.Direction.BACK'):
        session.set(chat_id=chat_id,
                    key='question___uzb_title_in_list',
                    value=text)
        # get_questions(message=message)
        session.update_key(chat_id=chat_id,
                           key='questions',
                           value=session.pop(chat_id=chat_id, key='question'),
                           method='append')
        send_message(chat_id=chat_id,
                     text='üòä –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω\n'
                          'üßê –•–æ—Ç–∏—Ç–µ –ª–∏ –µ—â—ë –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤?',
                     reply_markup=markups.yes_or_not(chat_id=chat_id,
                                                     back_=False),
                     method=will_be_next)
    else:
        get_russian_list_title(chat_id=chat_id)


def will_be_next(message: Message):
    chat_id, text, message_id = get_info_from_message(message=message)

    if text == Tx.get(chat_id=chat_id,
                      text_id='Buttons.YES'):
        get_questions(message=message)

    # elif text == Tx.get(chat_id=chat_id,
    #                     text_id='Buttons.NO'):
    else:
        end_create_pattern(chat_id=chat_id)


def end_create_pattern(chat_id: int):
    pattern_title = session.get(chat_id=chat_id,
                                key='pattern')['rus']
    PatternsWork.create(chat_id=chat_id)
    send_message(chat_id=chat_id,
                 text=f'üòä –®–∞–±–ª–æ–Ω "{pattern_title}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    output_patterns_callback_func(chat_id=chat_id)
